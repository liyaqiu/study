数据结构

线性结构 数据和元素之间存在一对一的线性关系（数组，队列，栈，链表）
1.顺序存储结构 逻辑有序，物理结构有序（内存地址连续）
数组
2.链式存储结构 逻辑有序，物理结构无序（内存地址不连续）
单向链表
双向链表
约瑟夫环

非线性结构（二维数组，多维数组，树结构，图结构，广义表）


数组，链表，树
数组查询快，增删慢
链表增删快，查询慢
树 查找 增删都不错


哈希表(散列表)实现
数组+链表
数组+二叉树

树结构
  前序（root先输出，左输出，右输出）
  中序（左节点先输出，root输出，右节点输出）
  后序（左输出，右输出，root节点最后输出）
二叉树
    满二叉树  （2*h-1）
    完全二叉树 (h-1 = (2*(h-1)-1)) 并且 h层的元素从左边开始是连续的
	顺序存储二叉树，意思就是说：让你用顺序结构(数组)来存储二叉树(最小满足完全二叉树)  
	  左子节点(2*index+1) index等于数组下标，或者是二叉树的节点，节点从0开始数 
	  右子节点(2*index+2)
	  父子节点(index-1/2)
	  非叶子节点(array.length/2-1)得出最后一个根节点 例如4/2-1=1  1和0 一共2次
	线索二叉树（为了不浪费叶子节点的空指针问题）计算出空指针的公式(element+1)例如3个节点，那么空指针为4个
	   前序线索化二叉树
	   中序线索化二叉树 已学
	   后序线索化二叉树
	赫夫曼树 wpl最小 = 树的带权路径长度 = 所有叶子节点的带权路径长度之和
	   通讯领域3种编码方式
			定长编码   例如a = 97 = 0110 0001 那么1个a就需要1个字节8位去存取 
			变长编码   例如a = 01 b = 02 c = 0102 组合之后是01020102在读取的时候无法确认位置应该读到第几个，这里就有2种可能 abab 或者 abc 或者 cc
			赫夫曼编码（压缩率20%-90%）属于变长编码的一种
	二叉排序树 
		 规则:左子节点比父节点小，右子节点比父节点大
		 删除节点:叶子节点，节点带1个叶子节点，节点带2个叶子节点
	平衡二叉树（每个节点的左子树和右子树之间的值得不能大于1）
		 单旋转
		 多旋转
		 双向旋转
多叉树
    节点度（有多少个字节点就代表为多少度）
	树度（最大的节点度）
	B树（数据放在所有节点）
	 23树（由二节点(至少要有2节点)和三节点(至少要有3节点)构成的数）
	B+树（数据只放在叶子节点）
	B*树（数据只放在叶子节点，而且除了根和叶子，其他节点之间有关联关系）
图
  图的表示方式
	邻接矩阵（二维数组）
	邻接表（1维数据+链表）
	图的广度遍历
	图的深度遍历
  
稀疏数组转换
栈结构
前缀表达式（波兰表达式）
中缀表达式
后缀表达式（逆波兰表达式）

递归算法（回溯算法）
  迷宫问题
  八皇后问题

排序算法
	插入排序
	  直接插入排序
	  希尔排序
	选择排序
	  简单选择排序
	  堆排序（大顶堆（降序）小顶堆（升序））
	交换排序
	  冒泡排序
	  快速排序
	归并排序
	基数排序
	
时间复杂度【O(n)】是由时间频度【T(n)】简化而来的
	常数阶O(1)
	对数阶O(log2n)  基数排序
	线性阶O(n)  
	线性对数阶O(nlog2n)  快速排序<归并排序<希尔排序
	平方阶O(n^2)   冒泡排序 选择排序 插入排序
	立方阶O(n^3) / O(n*m*p)
	K方阶O(n^k)
	指数阶O(2^n)

查找算法
	顺序查找(线性查找)
	二分查找(折半查找)
	插值查找
	斐波那契查找	
	



稀疏数组



算法

https://blog.csdn.net/weixin_44898959/article/details/114765748 



前序输出：1 2 3 5 4
中序输出：2 1 5 3 4
后序输出: 2 5 4 3 1


























