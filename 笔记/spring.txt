spring boot

yaml配置文档
	https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#application-properties
	

spring cloud alibaba中文文档
	https://github.com/alibaba/spring-cloud-alibaba/blob/master/README-zh.md	
	
	
负载均衡策略
	旧版本ribbon
	新版本loadbalancer 
	https://docs.spring.io/spring-cloud-commons/docs/3.1.0/reference/html/#spring-cloud-loadbalancer
	https://www.cnblogs.com/seanRay/p/14781110.html


eureka服务发现
	配置文档
		https://docs.spring.io/spring-cloud-netflix/docs/2.2.10.RELEASE/reference/html/
	利用restTepmelete发服务请求
nacos服务发现和配置管理 https://github.com/alibaba/nacos
	依赖
		 <!-- nacos注册中心-->
        <dependency>
            <groupId>com.alibaba.cloud</groupId>
            <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>
        </dependency>
       <!-- nacos配置中心-->
        <dependency>
            <groupId>com.alibaba.cloud</groupId>
            <artifactId>spring-cloud-starter-alibaba-nacos-config</artifactId>
        </dependency>
	文档地址
		https://nacos.io/zh-cn/docs/quick-start.html
	下载地址
		https://github.com/alibaba/nacos/releases/tag/1.4.1
	启动命令
		startup.cmd -m standalone
		
	集群配置 nginx+nacos+mysql集群
		1.导入数据表
			nacos-mysql.sql 
		2.cluster.conf
			192.168.109.1:8848
			192.168.109.1:8849
			192.168.109.1:8850
		3.application.properties
			server.port=8850
			spring.datasource.platform=mysql
			db.num=1
			db.url.0=jdbc:mysql://localhost:3306/nacosdb?characterEncoding=utf8&connectTimeout=1000&socketTimeout=3000&autoReconnect=true&useUnicode=true&useSSL=false&serverTimezone=UTC
			db.user.0=root
			db.password.0=123456
		4.启动nacos
			startup.cmd
	
feign
	<dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-openfeign</artifactId>
        </dependency>
		
spring cloud gateway
	官方文档
		https://docs.spring.io/spring-cloud-gateway/docs/2.2.9.RELEASE/reference/html/#gatewayfilter-factories
		
docker
	 阿里云镜像加速
		https://developer.aliyun.com/article/773368?spm=a2c6h.13813017.content3.1.68d11b25RD3rwp
docker registry ui
	图形化界面私有仓库搭建
		https://github.com/jc21/docker-registry-ui


spring amqp	(advanced message queue protocol)
	官方文档
		https://docs.spring.io/spring-amqp/docs/2.3.13/reference/html/#rabbitlistener-changes
	rabbitmq 		 
		docker run -d --hostname my-rabbit \
		--name rmq -e RABBITMQ_DEFAULT_USER=liyaqiu -e RABBITMQ_DEFAULT_PASS=123456 \
		-p 15672:15672 -p 5672:5672 -d rabbitmq:3-management
	登陆地址
		http://192.168.0.203:15672/#/users/liqiu
		
		
elasticsearch
		docker run -d --name elasticsearch --net somenetwork -p 9200:9200 -p 9300:9300 -v config:/usr/share/elasticsearch/config -v data:/usr/share/elasticsearch/data -v plugins:/usr/share/elasticsearch/plugins -e "ES_JAVA_OPTS=-Xms512m -Xmx512m"  -e "discovery.type=single-node" elasticsearch:7.12.1
	登陆地址	
		http://192.168.0.203:9200	
	kibana
		docker run -d --name kibana --net somenetwork -e "ELASTICSEARCH_HOSTS=http://elasticsearch:9200" -e "LS_JAVA_OPTS=-Xmx256m -Xms256m"  -p 5601:5601 kibana:7.12.1
	分词器
		拼音分词器
			https://github.com/medcl/elasticsearch-analysis-pinyin/releases
		中文分词器	
			https://github.com/medcl/elasticsearch-analysis-ik
	cerebro 监控es

sentinel 微服务保护
		官方文档
			https://github.com/alibaba/Sentinel/releases/tag/1.8.1
		雪崩问题（因一个服务的故障导致整个链路的其他服务产生故障）
			1.流量控制
			2.线程隔离
			3.降级熔断
				熔断策略
					慢调用
					异常比例
					异常数
			4.超时处理
		配置持久化
			https://blog.csdn.net/qq_40592377/article/details/108895824
			利用sentinel-dashboard推送到nacos,服务在从nacos获取下来
			
seata四种分布式事务解决方案
	官方文档
		https://seata.io/zh-cn/docs/ops/deploy-guide-beginner.html
	全局事务四中常用模式
	
		XA  模式 （无代码入侵）：强一致性分阶段事务，牺牲了一定的可用性	
			优点：事务的强一致性，满足ACID严则
			缺点：需要数据库支持XA模式，资源锁定
			事务协调器（TC）依赖表
				branch_table
				global_table
		AT  模式 （无代码入侵）：最终一致性的分阶段事务模式，说seata默认模式
			优点：一点段直接提交事务，释放数据库资源，性能比较号
				  利用全局锁实现隔离
			缺点：两阶段提交属于软状态，属于弱一致性
				  框架的快照（undolog）功能会影响性能，但比XA模式要好很多
			事务协调器（TC）依赖表
				branch_table
				global_table
				lock_table
			资源管理器（RM）依赖表
				undo_log
				  
		TCC 模式 （有代码入侵）：弱一致性的分阶段事务模式
			优点：一阶段完成事务提交，释放数据库资源，性能好
				  相比AT和XA模型，无需要生成快照，无需使用全局锁，性能最强
				  不依赖数据库事务，而是依赖补偿操作，可以用非事务型数据库实现
			缺点：软状态，事务是最终一致性
				  实现复杂，需要实现 try confirm cancel接口
				  需要考虑confirm和cancel失败情况做幂等处理
			TCC每个阶段
				Try：资源检查和预留
					悬挂处理：Try操作网络阻塞造成Cancel执行，从而已经回滚过了，对于已经回滚过的业务永远不可能在执行Confirm和Concel操作，此时Try操作因为网络的恢复而成功，这时候形成的业务悬挂。
				Confirm：业务执行和提交（Confirm方法可能网络堵塞原因，事务管理器（TM）可能会调用多次）
					幂等处理
				Cancel：预留资源的释放（Cancel方法可能网络堵塞原因，事务管理器（TM）可能会调用多次）
					空回滚+幂等处理：因为Try网络阻塞或者执行时间过长，被TM当作失败处理向TC发起了回滚操作，导致的Cancel的执行形成的空回滚。
					
		SAGA模式 （有代码入侵）：长事务模式
	
	[client](https://github.com/seata/seata/tree/develop/script/client)  存放用于客户端的配置和SQL
		- at: AT模式下的 `undo_log` 建表语句
		- conf: 客户端的配置文件
		- saga: SAGA 模式下所需表的建表语句
		- spring: SpringBoot 应用支持的配置文件
	[server](https://github.com/seata/seata/tree/develop/script/server) 存放server侧所需SQL和部署脚本
		- db: server 侧的保存模式为 `db` 时所需表的建表语句
		- docker-compose: server 侧通过 docker-compose 部署的脚本
		- helm: server 侧通过 Helm 部署的脚本
		- kubernetes: server 侧通过 Kubernetes 部署的脚本
	[config-center](https://github.com/seata/seata/tree/develop/script/config-center) 用于存放各种配置中心的初始化脚本，执行时都会读取 `config.txt`配置文件，并写入配置中心
	# 脚本说明
		- nacos: 用于向 Nacos 中添加配置
		- zk: 用于向 Zookeeper 中添加配置，脚本依赖 Zookeeper 的相关脚本，需要手动下载；ZooKeeper相关的配置可以写在 `zk-params.txt` 中，也可以在执行的时候输入
		- apollo: 向 Apollo 中添加配置，Apollo 的地址端口等可以写在 `apollo-params.txt`，也可以在执行的时候输入
		- etcd3: 用于向 Etcd3 中添加配置
		- consul: 用于向 consul 中添加配置
	
	利用nacos配置管理
	seataServer.properties
		store.mode = db
		store.db.datasource = druid
		store.db.dbType = mysql
		store.db.driverClassName = com.mysql.jdbc.Driver
		store.db.url = jdbc:mysql://localhost:3306/seata?rewriteBatchedStatements=true
		store.db.user = root
		store.db.password = 123456
		store.db.minConn = 5
		store.db.maxConn = 30
		store.db.globalTable = global_table
		store.db.branchTable = branch_table
		store.db.lockTable = lock_table
		store.db.queryLimit = 100

		server.recovery.committingRetryPeriod = 1000
		server.recovery.asynCommittingRetryPeriod = 1000
		server.recovery.rollbackingRetryPeriod = 1000
		server.recovery.timeoutRetryPeriod = 1000
		  
		metrics.enabled = false
		metrics.registryType = compact
		metrics.exporterList = prometheus
		metrics.exporterPrometheusPort = 9898


radis
	安装
		yum -y install gcc tcl
		tar -zxvf redis-6.2.6.tar.gz
		cd redis-6.2.6
		make && make install
	服务器启动 redis-server  /conf/redis.conf
	客户端连接 redis-cli -h 130.120.0.203 -p 6379
	
	持久化 redis.conf文件
		RDB （文件体积小）内存快照，利用fork异步备份一份新的文件，存在数据丢失
			save "" #禁用rdb
			save 300 5 #300秒内有5个key被修改将触发持久化
			dir /root/temp 修改保存数据的位置
		AOF （文件体积大）追加命令到文件
			appendonly  yes 启用AOF
			appendfilename  "appendonly.aof"
			appendfsync no 将命令先存入AOF缓存区 由操作系统决定将缓存区命令写到磁盘，（存在数据丢失）
			appendfsync everysec 将命令先存入AOF缓存区,每秒将缓存区数据写到AOF文件（存在数据库丢失）
			appendfsync always 每执行一次命令，立即记录到AOF文件（数据不丢失，性能差）
			
	主从集群（1主多从） redis.conf文件  
		192.168.0.100(主，写数据)
			port 6379
			bind 192.168.0.100
			replica-announce-ip 192.168.0.100  （ip声明）
			dir /temp/data/
			daemonize yes 开启后台运行
			logfile /tmp/data/run.log
		192.168.0.101(从，读数据)
			port 6379
			bind 192.168.0.101
			replica-announce-ip 192.168.0.101 （ip声明）
			dir /temp/data/
			replicaof 192.168.0.100 6379  /5.0旧版本 slaveof 192.168.0.100 6379  从节点加入主节点
			daemonize yes 开启后台运行
			logfile /tmp/data/run.log
		192.168.0.102(从，读数据)
			port 6379
			bind 192.168.0.102
			replica-announce-ip 192.168.0.102 （ip声明）
			dir /temp/data/
			replicaof 192.168.0.100 6379 从节点加入主节点
			daemonize yes 开启后台运行
			logfile /tmp/data/run.log
		查看主从 info replication
	redis-sentinel集群 可以不同redis机器安装 （新创建一份文件）sentinel.conf文件
		启动redis-sentinel ./sentinel.conf
		192.168.0.103
			port 26379
			sentinel announce-ip 192.168.0.103 （ip声明）
			sentinel monitor mymaster 192.168.0.100 6379 2 (需要监控的redis master,2表示选举master多少个法定人数)
			sentinel down-after-milliseconds mymaster 5000
			sentinel failover-timeout mymaster 60000
			dir /data/
		192.168.0.104
			port 26380
			sentinel announce-ip 192.168.0.104 （ip声明）
			sentinel monitor mymaster 192.168.0.100 6379 2 (需要监控的redis master,2表示选举master多少个法定人数)
			sentinel down-after-milliseconds mymaster 5000
			sentinel failover-timeout mymaster 60000
			dir /data/
		192.168.0.105
			port 26381
			sentinel announce-ip 192.168.0.105 （ip声明）
			sentinel monitor mymaster 192.168.0.100 6379 2 (需要监控的redis master,2表示选举master多少个法定人数)
			sentinel down-after-milliseconds mymaster 5000
			sentinel failover-timeout mymaster 60000
			dir /data/
	
	集群数据同步优化方案
		默认用RDB做全量同步+增加同步，可以改成网络同步 repl-diskless-sync yes
		提高repl_baklog的大小

	redis分片集群（多主多从	），不需要redis-sentinel来做监测了
		192.168.0.0.101-106 在redis.conf增加如下配置
			port 6379
			cluster-enabled yes 开启集群
			cluster-config-file /tmp/data/nodes.conf  集群的配置文件名称，不需我们创建，由redis自己维护
			cluster-node-timeout 5000  节点之间心跳超时时间
			dir /temp/data/
			bind 192.168.0.101-106
			daemonize yes 开启后台运行
			replica-announce-ip 192.168.0.101-106 （ip声明）
			protected-mode no 保护模式(用户密码校验是否开启)
			databases 1 数据库数量
			logfile /tmp/data/run.log
		启动redis集群
			redis-server  /conf/redis.conf	
		停止redis
			redis-cli -h 192.168.1.100 -p 7002 shotdown
		redis5.0前启动集群的方式
			yum -y install zlib ruby rubygems
			gem install redis
			/root/redis-4.9/src/redis-trib.rb --replicas 1 192.168.0.101:6379 192.168.0.102:6379 192.168.0.103:6379 192.168.0.104:6379 192.168.0.105:6379 192.168.0.106:6379
		redis5.0后启动集群的方式
			redis-cli --cluster create --cluster-replicas 1 192.168.0.101:6379 192.168.0.102:6379 192.168.0.103:6379 192.168.0.104:6379 192.168.0.105:6379 192.168.0.106:6379
			命令解析
				--cluster-replicas 1 公式：节点总数/(replicas+1) 得到master数量，剩下的全部为slave节点，随机分配到不同的master
			
		集群命令
			查看帮助
				redis-cli --cluster help
			查看状态
				redis-cli -h 192.168.0.203  -p 7006 cluster nodes
			客户端连接
				redis-cli -c -h 192.168.0.203  -p 7006 
		散列插槽利用{???}来存取，可以路由到不同的master的插槽(slots)
			{abc}aa
			{abc1}aa
			{abc2}aa
		扩容redis master节点,这里还需要做插槽分配 redis-cli --cluster reshard,否则master没有使用的插槽
			redis-cli --cluster add-node 192.168.1.107:6379  192.168.1.101:6379(集群中任意一个节点)
		扩容redis slave节点	
			redis-cli --cluster  add-node 192.168.1.107:6379  192.168.1.101:6379  --cluster-slave --cluster-master-id 7a23d544e7cf3300584c3da2d53e8abdf696947d
		手动故障转移
			1.先让该机器加入到集群中成为slave
			2.登陆slave客户端 redis-cli -h 192.168.0.107 -p 6379
			3.执行 cluster failover
                 
多级缓存
	caffeine本地缓存类似于guava
	docker run -p 3306:3306 --name mysql -v $PWD/conf:/etc/mysql/conf.d -v $PWD/logs:/logs -v $PWD/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --privileged -d mysql:5.7.25		
	OpenResty	
		安装
			yum -y install pcre-devel openssl-devel gcc --skip-broken
			yum-config-manager --add-repo https://openresty.org/package/centos/openresty.repo
			yum -y install yum-utils(报错的情况下执行)
			yum -y install openresty
			yum -y install openresty-opm
		启动OpenResty
			添加环境变量
				export PATH=$PATH:/usr/local/openresty/nginx/sbin
			命令
				启动 nginx
				停止 nginx -s stop
				加载配置 nginx -s reload


https://www.bilibili.com/video/BV1LQ4y127n4?p=156&spm_id_from=pageDriver   14分钟				
		
		
		
		
		
		
		
		