设计模式7大原则
1单一职责原则（每个类做各自的事情）
2接口隔离原则（最小接口化）
3依赖倒转原则（细节类应该面向接口或者抽象类编程，遵循接口编程）
4里氏替换原则（子类可以扩展父类的功能，但不能改变父类原有的功能）
5开闭原则（对提供方扩展开放，对使用者修改关闭）
6迪米特法则 也称为最少知道原则（类与类之间减少耦合度，类与类之间最好是直接朋友关系（非局部变量直接使用））
7合成复用原则（将依赖对象作为成员变量使用或者作为方法传入（不可分离（直接new出成员变量），组合，可分离（方法赋值到成员变量），聚合））

总结，7种原则主要说围绕的低耦合高内聚来实现，做到代码可 复用性 扩展性 灵活性 维护性


创建模式（5）
1单例模式  恶汉+懒汉（DCL 或者 静态内部类）
2工厂模式  单个工厂类 
3抽象工厂模式   面向接口的工厂类
4原型模式  （浅拷贝，深拷贝）
5建造者模式

工厂模式与建造者模式区别：
工厂模式：使用端面向的事工厂对象，关注点是具体对象
建造者模式：使用端面向的主管和建造者，关注点说对象细节

结构模式（7）
1享元模式    对一些固定状态的对象缓存起来直接使用
2适配器模式  充当2端兼容性问题的解决
3代理模式    对类的增强或者拦截用到代理（静态代理，动态代理（(JDK代理基于接口来生成子类) (CGLib代理基于类来生成子类)））
4组合模式    完成树结构输出
5装饰者模式  主要说的是一个物品如何被制作而成的，具有包裹行为，走的说纵深路线   
6桥接模式   主要说解决多个维度的扩展的类，找到一个维度来对其他维度进行聚合使用（走的是横向）
7外观模式    对内部复杂细节包装起来，向使用者提供一个简单的操作流程（面向的是系统层面的）


行为模式（11）

5观察者模式    一个主题，多个订阅者，主题可以一次推送消息给多个订阅者（jdk提供有一个Observable实现类）
1模版方法模式  对内部复杂细节包装起来，向使用者提供一个简单的操作流程（面向的是类层面的）
8解释器模式
7备忘录模式
2命令模式      利用一个中央控制器控制所有的功能。（经典案例遥控器）
6中介者模式    多个类相互交互，形成网状耦合，利用中介类解耦多个类的交互


4迭代器模式   实现itrator接口，根据自己的方式来返回迭代的需要
10策略模式   利用聚合的方式组装起来调用个个接口需要用到的方法
11职责链模式（责任链模式）利用环形链来达到处理请求
3访问者模式   经典案例，对男人和女人打分，男人和女人说元素，因此比较固定，然后打分可以有分裂（成功 失败 待定）
9状态模式    
